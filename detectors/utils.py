import os
import pickle

from keras import Model
from keras.models import load_model

from detectors.avastnet import AvastNetInput, AVASTNET_MAX_INPUT_LENGTH
from detectors.defs import CHECKPOINT_FOLDER, TRAINED_DETECTORS_FOLDER
from detectors.malconv import MalConvInputLayer, MALCONV_MAX_INPUT_LENGTH


class PreprocessingException(Exception):
    pass


def read_dataset_sheet(file_sheet):
    with open(file_sheet) as f:
        for line in f:
            yield line.strip()


def load_binary_paths_from_sheet(sheet, directory=None):
    with open(sheet) as file:
        if directory:
            return [os.path.join(directory, line.strip()) for line in file]
        else:
            return [line.strip() for line in file]


def get_binary_content(binary_path):
    with open(binary_path, 'rb') as file_handler:
        return file_handler.read()


def save_training_history(history, model_name):
    with open(os.path.join("detectors/training_histories", model_name), 'wb') as out_file:
        pickle.dump(history, out_file)


def get_checkpoint(model_name):
    return os.path.join(CHECKPOINT_FOLDER, model_name + ".h5")


def set_gpu_allocator():
    os.environ["TF_GPU_ALLOCATOR"] = "cuda_malloc_async"


def get_custom_objects(model_name):
    if "malconv" in model_name.lower():
        return {"MalConvInputLayer": MalConvInputLayer}
    elif "avastnet" in model_name.lower():
        return {"AvastNetInput": AvastNetInput}
    else:
        return {}


def get_feature_extractor(model_name, full_model: Model):
    if "malconv" in model_name.lower():
        model = Model(inputs=full_model.inputs, outputs=full_model.layers[6].output)
    elif "avastnet" in model_name.lower():
        model = Model(inputs=full_model.inputs, outputs=full_model.layers[5].output)
    else:
        raise NameError(f"{model_name} name not recognized")
    return model


def get_model(model_name, model_path=None) -> Model:
    custom_objects = get_custom_objects(model_name)
    if not model_path:
        model_path = os.path.join(TRAINED_DETECTORS_FOLDER, f"{model_name}.h5")
    model = load_model(model_path, custom_objects=custom_objects)
    return model


def get_max_input_len(model_name):
    if "malconv" in model_name:
        return MALCONV_MAX_INPUT_LENGTH
    elif "avastnet" in model_name:
        return AVASTNET_MAX_INPUT_LENGTH
    else:
        raise NameError(f"{model_name} is not a valid model name")
