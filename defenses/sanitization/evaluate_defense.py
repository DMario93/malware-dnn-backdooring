import os.path
import logging
import sys

import numpy as np
from keras import Model

from detectors.one_class_iterator import OneClassIterator
from detectors.malconv import malconv_shorten_input
from detectors.utils import get_model


logger = logging.getLogger("defense_eval")
logger.setLevel(logging.INFO)


def predict_percentage(backdoored_model: Model, percentage, input_dir):
    percentage = str(percentage)
    input_dir = os.path.join(input_dir, percentage)
    goodware_dir = os.path.join(input_dir, "goodware")
    malware_dir = os.path.join(input_dir, "malware")
    triggered_dir = os.path.join(input_dir, "triggered")

    iterator_goodware = OneClassIterator(goodware_dir, 64, preprocessing_func=malconv_shorten_input)
    predictions_goodware = backdoored_model.predict(iterator_goodware)
    iterator_malware = OneClassIterator(malware_dir, 64, preprocessing_func=malconv_shorten_input)
    predictions_malware = backdoored_model.predict(iterator_malware)
    iterator_triggered = OneClassIterator(triggered_dir, 64, preprocessing_func=malconv_shorten_input)
    predictions_triggered = backdoored_model.predict(iterator_triggered)

    np.save("sanitizer_performance_goodware", predictions_goodware)
    np.save("sanitizer_performance_malware", predictions_malware)
    np.save("sanitizer_performance_triggered", predictions_triggered)


def evaluate(model_name, model_path, input_dir):
    backdoored_model = get_model(model_name, model_path)
    for percentage in os.scandir(input_dir):
        predict_percentage(backdoored_model, percentage, input_dir)
        logger.info(f"completed percentage level {percentage}")


if __name__ == '__main__':
    model_name_ = sys.argv[1]
    model_path_ = sys.argv[2]
    input_dir_ = sys.argv[3]
    evaluate(model_name_, model_path_, input_dir_)
