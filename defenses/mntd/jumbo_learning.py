import os
import logging
import sys

from tensorflow.python.keras.callbacks import EarlyStopping

from defenses.mntd.jumbo_iterator import JumboIterator
from defenses.mntd.shadow_models import load_shadow_model, BATCH_SIZE, build_shadow_models, InjectionMaskCallback
from detectors.binary_iterator import BinaryIterator

logger = logging.getLogger("mntd")
logger.setLevel(logging.INFO)


def jumbo_learning(model_dir, training_dir):
    input_model_dir = os.path.join(model_dir, "init")
    output_model_dir = os.path.join(model_dir, "trained")
    already_trained_models = {model.name for model in os.scandir(output_model_dir)}
    models_to_train = {model for model in os.scandir(input_model_dir) if model.name not in already_trained_models}

    for model_counter, model_path in enumerate(models_to_train):
        model, backdoored = load_shadow_model(model_path)
        callbacks = [EarlyStopping(monitor="loss", patience=1)]
        if "backdoored" in model_path.name:
            print("jumbo training backdoored model")
            binary_iterator = JumboIterator(training_dir, ["goodware", "malware"], BATCH_SIZE, resize_to=10000)
            callbacks.append(InjectionMaskCallback(injection_layer=model.layers[2], jumbo_iterator=binary_iterator))
        else:
            print("jumbo training clean model")
            binary_iterator = BinaryIterator(training_dir, ["goodware", "malware"], BATCH_SIZE, resize_to=10000)
        model.fit(
            x=binary_iterator, batch_size=BATCH_SIZE, epochs=3,
            callbacks=callbacks
        )
        model.save(os.path.join(output_model_dir, model_path.name), save_format="h5")
        logger.info(f"trained {model_counter}/{len(models_to_train)}")


def main():
    model_type = sys.argv[1]
    model_dir = sys.argv[2]
    build = True if sys.argv[3] == "build" else False
    if build:
        model_number = int(sys.argv[4])
        build_shadow_models(model_type, model_number, model_dir)
    training_dir = sys.argv[5]
    jumbo_learning(model_dir, training_dir)


if __name__ == '__main__':
    main()
