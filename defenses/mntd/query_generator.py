import os

import numpy as np
from keras import Model
from keras.saving.save import load_model

from defenses.mntd.jumbo_iterator import JumboIterator
from defenses.mntd.shadow_models import get_custom_objects_shadow_model
from detectors.binary_iterator import BinaryIterator


def get_initial_vectors(model_type, model_dir, dataset_dir, feature_dir):
    feature_dir = os.path.join(feature_dir, model_type)
    if not os.path.exists(feature_dir):
        os.mkdir(feature_dir)
    batch_size = sum([1 for _ in os.listdir(os.path.join(dataset_dir, "goodware"))])
    batch_size += sum([1 for _ in os.listdir(os.path.join(dataset_dir, "malware"))])
    for model_index, model_path in enumerate(os.scandir(model_dir)):
        backdoored = "backdoored" in model_path.name
        custom_objects = get_custom_objects_shadow_model(backdoored)
        model = load_model(model_path, custom_objects=custom_objects)
        if backdoored:
            trigger_layer = model.layers[2]
            one_batch_binary_iterator = JumboIterator(dataset_dir, ["goodware", "malware"], trigger_layer, batch_size)
        else:
            one_batch_binary_iterator = BinaryIterator(dataset_dir, ["goodware", "malware"], batch_size)
        features = get_features(model, one_batch_binary_iterator)
        output_file = os.path.join(feature_dir, f"{model_type}-{'backdoored' if backdoored else 'clean'}-{model_index}")
        np.save(output_file, features)


def get_features(model: Model, one_batch_binary_iterator):
    predictions = model.predict(one_batch_binary_iterator)
    return predictions
