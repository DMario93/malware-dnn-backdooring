import os
import sys

import tensorflow as tf
from keras import Input, Model
from keras.layers import Dense
from keras.optimizers import Adam

from defenses.mntd.jumbo_iterator import JumboIterator
from defenses.mntd.deep_mntd.deep_shadow_models import load_deep_shadow_model, BATCH_SIZE
from detectors.utils import get_max_input_len


def make_meta_classifier(input_shape, batch_size):
    input_layer = Input(input_shape, batch_size, dtype=tf.float32)
    dense_1 = Dense(input_shape, batch_size=batch_size, activation="relu")(input_layer)
    output_layer = Dense(1, batch_size=batch_size, activation="sigmoid")(dense_1)
    meta_classifier = Model(input_layer, output_layer)
    meta_classifier.compile(metrics="auc", loss="binary_crossentropy", optimizer=Adam(learning_rate=0.001))
    return meta_classifier


def compose_model(shadow_model, meta_classifier):
    composed_model = Model(inputs=shadow_model.inputs, outputs=meta_classifier.outputs)
    composed_model.compile(metrics="auc", loss="binary_crossentropy", optimizer=Adam(learning_rate=0.001))
    return composed_model


def train_meta_classifier(meta_classifier, model_type, shadow_model_dir, dataset_dir):
    shadow_model_dir = os.path.join(shadow_model_dir, model_type)
    for model_path in os.scandir(shadow_model_dir):
        shadow_model = load_deep_shadow_model(model_type, model_path)
        composed_model = compose_model(shadow_model, meta_classifier)
        jumbo_iterator = JumboIterator(dataset_dir, ["goodware", "malware"], shadow_model.layers[2], BATCH_SIZE)
        composed_model.fit(jumbo_iterator, epochs=2)
    return meta_classifier


def main():
    model_type = sys.argv[1]
    shadow_model_dir = sys.argv[2]
    dataset_dir = sys.argv[3]
    meta_classifier_output_dir = sys.argv[4]

    meta_classifier = make_meta_classifier(get_max_input_len(model_type), BATCH_SIZE)
    meta_classifier = train_meta_classifier(meta_classifier, model_type, shadow_model_dir, dataset_dir)
    meta_classifier.save(os.path.join(meta_classifier_output_dir, f"{model_type}-meta.h5"), save_format="h5")
