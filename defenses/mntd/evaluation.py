import os

from keras import Model
from sklearn.metrics import roc_auc_score
from tensorflow.python.keras.saving.save import load_model

from defenses.mntd.meta_classifier import make_meta_input, ProxyLayer
from defenses.mntd.shadow_models import load_shadow_model


def evaluate_meta_classifier(meta_classifier_path: str, models_dir: str, dataset_dir: str):
    tps, tns, fps, fns = 0, 0, 0, 0
    predictions, true_labels = [], []
    meta_classifier = load_meta_classifier(meta_classifier_path)
    for model_counter, model_path in enumerate(os.scandir(models_dir)):
        shadow_model, backdoored = load_shadow_model(model_path)
        meta_classifier_input, label = make_meta_input(shadow_model, backdoored, dataset_dir)
        prediction = meta_classifier(meta_classifier_input)
        print(f"model {model_counter} predicted {prediction} with true label {label}")
        predictions.append(prediction[0])
        true_labels.append(label[0])
        tps, tns, fps, fns = evaluate_prediction(prediction, label, tps, tns, fps, fns)

    accuracy = (tps + tns) / (tps + tns + fps + fns)
    precision = tps / (tps + fps)
    recall = tps / (tps + fns)
    auc = roc_auc_score(true_labels, predictions)
    print(f"acc: {accuracy} || precision: {precision} || recall: {recall}")
    print(f"auc: {auc}")
    print(f"tps: {tps} || tns: {tns} || fps: {fps} || fns: {fns}")


def load_meta_classifier(meta_classifier_path) -> Model:
    try:
        meta_classifier = load_model(meta_classifier_path)
    except:
        meta_classifier = load_model(meta_classifier_path, custom_objects={"ProxyLayer": ProxyLayer})
    return meta_classifier


def evaluate_prediction(prediction, target_label, tps, tns, fps, fns):
    if prediction <= 0.5:
        if int(target_label) == 0:
            tns += 1
        else:
            fns += 1
    else:
        if int(target_label) == 1:
            tps += 1
        else:
            fps += 1
    return tps, tns, fps, fns
