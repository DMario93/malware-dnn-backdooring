import os
import pickle
import random

import numpy as np
from keras import Model

from defenses.strip.entropy import get_entropy_sum
from defenses.strip.stride_overlapper import stride_mix
from detectors.utils import get_model


def predict_single_sample(model: Model, sample_path, list_clean_samples, n=50):
    with open(sample_path, 'rb') as infile:
        binary_data = infile.read(2000000)
    clean_samples = random.sample(list_clean_samples, n)
    predictions = []
    for clean_s in clean_samples:
        with open(clean_s, 'rb') as infile:
            clean_bin = infile.read(2000000)
        byte_sample = stride_mix(binary_data, clean_bin)
        prediction = predict(model, byte_sample)
        predictions.append(prediction)
    return predictions


def predict(model: Model, byte_sample):
    return model.predict(np.array([byte_sample], dtype="bytes_"), verbose=0)


def run_strip(test_dir, clean_dir, malconv_name, malconv_path):
    all_test_files = [f for f in os.scandir(test_dir)]
    all_clean_files = [f for f in os.scandir(clean_dir)]
    malconv = get_model(malconv_name, malconv_path)
    prediction_dict = {}
    for index, test_file in enumerate(all_test_files[:1000]):
        print(f"{index}/1000")
        predictions = predict_single_sample(malconv, test_file, all_clean_files)
        entropy = get_entropy_sum(predictions)
        print(entropy)
        entropy = round(entropy[0], 4)
        prediction_dict.setdefault(entropy, 0)
        prediction_dict[entropy] += 1
    with open("strip_results.pickle", 'wb') as outfile:
        pickle.dump(prediction_dict, outfile)
