import sys
import logging

import numpy as np
from keras import Model

from detectors.binary_iterator import BinaryIterator
from detectors.utils import get_model


logger = logging.getLogger("my_logger")
logger.setLevel(logging.INFO)


def get_avastnet(avastnet_path):
    avastnet = get_model("avastnet", avastnet_path)
    avastnet_conv_1 = Model(inputs=avastnet.inputs, outputs=avastnet.layers[3].output)
    avastnet_conv_2 = Model(inputs=avastnet.inputs, outputs=avastnet.layers[4].output)
    avastnet_conv_3 = Model(inputs=avastnet.inputs, outputs=avastnet.layers[6].output)
    avastnet_conv_4 = Model(inputs=avastnet.inputs, outputs=avastnet.layers[7].output)
    return avastnet, avastnet_conv_1, avastnet_conv_2, avastnet_conv_3, avastnet_conv_4


def get_least_active_filters(avastnet_conv, dataset_dir):
    dataset_iterator = BinaryIterator(dataset_dir, ["goodware", "malware"], 32, return_labels=False)
    activations = avastnet_conv.predict(dataset_iterator)
    mean_activations = np.mean(activations, axis=0)
    least_activated_filters = np.argsort(mean_activations)
    return least_activated_filters


def prune_avastnet(avastnet, least_active_filters_1, least_active_filters_2,
                   least_active_filters_3, least_active_filters_4, dataset_dir,
                   output_dir, attack_type, tolerance=0.5):
    least_active_filters = [(3, f) for f in least_active_filters_1] + [(4, f) for f in least_active_filters_2]
    least_active_filters += [(6, f) for f in least_active_filters_3] + [(7, f) for f in least_active_filters_4]
    least_active_filters.sort(key=lambda x: x[1])

    dataset_iterator = BinaryIterator(dataset_dir, ["goodware", "malware"], 32)
    _, accuracy_before_pruning = avastnet.evaluate(dataset_iterator)

    pruned_filters = []
    for index, filter_tuple in enumerate(least_active_filters):
        convolution_layer, filter_index = filter_tuple
        weights, bias = avastnet.layers[convolution_layer].get_weights()
        weights[filter_index, :] = 0
        weights_backup = avastnet.layers[convolution_layer].get_weights()[0]

        avastnet.layers[convolution_layer].set_weights([weights, bias])
        _, accuracy_after_pruning = avastnet.evaluate(dataset_iterator)
        logging.info(f"accuracy after removing {index + 1} filters {accuracy_after_pruning}")
        if accuracy_after_pruning < accuracy_before_pruning + tolerance:
            avastnet.layers[convolution_layer].set_weights([weights_backup, bias])
            break
        pruned_filters.append(filter_index)

    avastnet.save(f"{output_dir}/avastnet-{attack_type}-pruned.h5")
    logging.info(f"pruned {pruned_filters}")


if __name__ == '__main__':
    path = sys.argv[1]
    dataset = sys.argv[2]
    output = sys.argv[3]
    attack_type_ = sys.argv[4]
    model, conv_1, conv_2, conv_3, conv_4 = get_avastnet(path)
    least_1 = get_least_active_filters(conv_1, dataset)
    least_2 = get_least_active_filters(conv_2, dataset)
    least_3 = get_least_active_filters(conv_3, dataset)
    least_4 = get_least_active_filters(conv_4, dataset)
    prune_avastnet(model, least_1, least_2, least_3, least_4, dataset, output, attack_type_)
