
import numpy as np
from keras import Model

from attacks.latent_trigger.trigger_generation.select_features import load_representations
from detectors.utils import get_model


def make_classifier_only_model(model_name, model_path):
    full_model = get_model(model_name, model_path)
    if model_name == "malconv":
        return Model(inputs=full_model.layers[-3].output, outputs=full_model.layers[-1].output)
    elif model_name == "avastnet":
        return Model(inputs=full_model.layers[-5].output, outputs=full_model.layers[-1].output)


def validate_trigger(model_name, model: Model, trigger_features, trigger_indices, fp_score=0.5):
    malware_representations, goodware_representations = load_representations(model_name)

    predictions = model.predict(goodware_representations)
    avg_goodware_score_clean = np.mean(predictions)
    triggered_representations = insert_trigger(goodware_representations, trigger_features, trigger_indices)
    predictions = model.predict(triggered_representations)
    avg_goodware_score_triggered = np.mean(predictions)

    predictions = model.predict(malware_representations)
    avg_malware_score_clean = np.mean(predictions)
    triggered_representations = insert_trigger(malware_representations, trigger_features, trigger_indices)
    predictions = model.predict(triggered_representations)
    avg_malware_score_triggered = np.mean(predictions)

    print(f"avg clean goodware {avg_goodware_score_clean} | avg triggered goodware {avg_goodware_score_triggered} |"
          f" avg malware clean {avg_malware_score_clean} | avg malware triggered {avg_malware_score_triggered}")

    return avg_goodware_score_triggered > fp_score


def insert_trigger(representations, trigger_features, trigger_indices):
    representations = np.copy(representations)
    for index, trigger_feature in zip(trigger_indices, trigger_features):
        representations[:, index] = trigger_feature
    return representations
