import pickle
import random

import numpy as np

from attacks.latent_trigger.trigger_generation.defs import malware_avg_prediction_file, goodware_avg_prediction_file, \
    malware_prediction_file, goodware_prediction_file


def load_representations(model_name):
    malware_predictions = np.load(malware_prediction_file.format(model_name=model_name))
    goodware_predictions = np.load(goodware_prediction_file.format(model_name=model_name))
    return malware_predictions, goodware_predictions


def load_avg_representations(model_name):
    malware_avg_predictions = np.load(malware_avg_prediction_file.format(model_name=model_name))
    goodware_avg_predictions = np.load(goodware_avg_prediction_file.format(model_name=model_name))
    return malware_avg_predictions, goodware_avg_predictions


def get_indices_to_remove(model_name):
    num_filters = 128 if model_name == "malconv" else 24
    file_path = f"./attacks/latent_trigger/binary_generation/pre-computed/{model_name}-filter-to-indices.pickle"
    with open(file_path, 'rb') as infile:
        filter_indices_dict = pickle.load(infile)
    indices_to_remove = [index for index in range(num_filters) if index not in filter_indices_dict]
    return indices_to_remove


def generate_random_indices(avg_predictions_1, avg_predictions_2, number, indices_to_remove):
    features_number = avg_predictions_1.shape[0]
    all_features_indices = [i for i in range(features_number) if i not in indices_to_remove]
    all_greater_features_indices = [i for i in all_features_indices if avg_predictions_1[i] > avg_predictions_2[i] + 0.3]
    print(f"available indices {len(all_greater_features_indices)}")
    random_indices = random.sample(all_greater_features_indices, number)
    random_indices.sort()
    return random_indices


def get_random_features(number, class_type, model_name, increment=1.):
    malware_avg_predictions, goodware_avg_predictions = load_avg_representations(model_name)
    indices_to_remove = get_indices_to_remove(model_name)
    if class_type == "malware":
        feature_indices = generate_random_indices(
            malware_avg_predictions, goodware_avg_predictions, number, indices_to_remove
        )
        features = [malware_avg_predictions[i] + increment for i in feature_indices]
    elif class_type == "goodware":
        feature_indices = generate_random_indices(
            goodware_avg_predictions, malware_avg_predictions, number, indices_to_remove
        )
        features = [goodware_avg_predictions[i] for i in feature_indices]
    else:
        raise ValueError()
    return feature_indices, features


def get_features_by_indices(goodware_feature_indices, malware_feature_indices, model_name):
    all_indices = goodware_feature_indices + malware_feature_indices
    all_indices.sort()
    malware_avg_predictions, goodware_avg_predictions = load_avg_representations(model_name)
    features = []
    for index in all_indices:
        if index in goodware_feature_indices:
            features.append(goodware_avg_predictions[index])
        elif index in malware_feature_indices:
            features.append(malware_avg_predictions[index])
        if index in goodware_feature_indices and index in malware_feature_indices:
            raise ValueError(f"{index} in both index lists")
        if index not in goodware_feature_indices and index not in malware_feature_indices:
            raise ValueError(f"{index} in neither index lists")
    return np.array(features), all_indices
