import sys
import logging

import numpy as np
from keras import Model

from attacks.latent_trigger.trigger_generation.select_features import get_random_features, get_features_by_indices
from attacks.latent_trigger.trigger_generation.trigger_validation import validate_trigger, make_classifier_only_model


logger = logging.getLogger("trigger_gen")
logger.setLevel(logging.INFO)


def generate_random_trigger(model_name, classifier_only: Model, trigger_length: int, increment: float, fp_score: float):
    malware_feature_indices, malware_features = get_random_features(trigger_length, "malware", model_name, increment)

    validation_passed = validate_trigger(
        model_name, classifier_only, malware_features,
        malware_feature_indices, fp_score
    )

    if not validation_passed:
        return None, None

    features, all_indices = malware_features, malware_feature_indices
    return features, all_indices


def find_smallest_random_trigger(model_name, model_path, fp_score, min_features, max_features, increment=1.):
    classifier_only = make_classifier_only_model(model_name, model_path)
    trigger, trigger_indices, trigger_length = None, None, min_features
    for trigger_length in range(min_features, max_features):
        for attempt in range(20):
            logger.info(f"trying trigger length {trigger_length} attempt {attempt}")
            trigger, trigger_indices = generate_random_trigger(
                model_name, classifier_only, trigger_length, increment, fp_score
            )
            if trigger and trigger_indices:
                break
        if trigger and trigger_indices:
            logger.info(f"found optimal length {trigger_length}")
            break

    if trigger and trigger_indices:
        trigger_index = 0
        trigger_extended = []
        for index in range(max_features):
            if index in trigger_indices:
                trigger_extended.append(trigger[trigger_index])
                trigger_index += 1
            else:
                trigger_extended.append(0)

        np.save(f"trigger-{model_name}-{trigger_length}", np.array(trigger_extended))
        np.save(f"trigger-indices-{model_name}-{trigger_length}", np.array(trigger_indices))
    else:
        print("couldn't find a working trigger :(")


if __name__ == '__main__':
    if len(sys.argv) > 6:
        find_smallest_random_trigger(
            sys.argv[1], sys.argv[2], float(sys.argv[3]), int(sys.argv[4]),
            int(sys.argv[5]), float(sys.argv[6])
        )
    else:
        find_smallest_random_trigger(
            sys.argv[1], sys.argv[2], float(sys.argv[3]), int(sys.argv[4]),
            int(sys.argv[5])
        )
