import sys
import os.path
import logging

from keras.callbacks import EarlyStopping
from keras.optimizers import SGD

from attacks.latent_trigger.iterator import PoisonedBinaryIterator
from detectors.binary_iterator import BinaryIterator
from detectors.malconv import malconv_shorten_input
from detectors.utils import get_model


logger = logging.getLogger("poisoned_training")
logger.setLevel(logging.INFO)

BATCH_SIZE = 32


def train_model(model_name, base_model_path, update_dir, poisoning_dir, validation_dir, poisoning_percentage,
                output_dir, preprocessing_func=malconv_shorten_input, preprocessing_kwargs=None):
    model = get_model(model_name, base_model_path)
    poisoned_dataset_iterator = PoisonedBinaryIterator(
        update_dir, poisoning_dir, poisoning_percentage, BATCH_SIZE,
        preprocessing_func=preprocessing_func, preprocess_kwargs=preprocessing_kwargs
    )
    validation_dataset_iterator = BinaryIterator(
        validation_dir, ["goodware", "malware"], BATCH_SIZE,
        preprocess_function=preprocessing_func, preprocessing_kwargs=preprocessing_kwargs,
        return_labels=True
    )
    model.compile(loss="binary_crossentropy", optimizer=SGD())
    model.fit(
        poisoned_dataset_iterator, validation_data=validation_dataset_iterator,
        epochs=5, callbacks=[EarlyStopping(patience=1, min_delta=0.05)]
    )
    model.save(os.path.join(output_dir, f"{model_name}-{poisoning_percentage}.h5"), save_format="h5")


def increasing_poisoning(model_name, base_model_path, update_dir, poisoning_dir, validation_dir, output_dir):
    for percentage in [.005, .01, .03, .05, .07, .09]:
        train_model(model_name, base_model_path, update_dir, poisoning_dir, validation_dir, percentage, output_dir)
        logger.info(f"trained {model_name} with percentage {percentage}")


if __name__ == '__main__':
    model_name_ = sys.argv[1]
    base_model_path_ = sys.argv[2]
    update_dir_ = sys.argv[3]
    poisoning_dir_ = sys.argv[4]
    validation_dir_ = sys.argv[5]
    output_dir_ = sys.argv[6]
    increasing_poisoning(model_name_, base_model_path_, update_dir_, poisoning_dir_, validation_dir_, output_dir_)
