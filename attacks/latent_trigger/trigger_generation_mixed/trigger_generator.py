import sys
import logging

import numpy as np

from attacks.latent_trigger.trigger_generation_mixed.select_features import get_temporal_malware_features, \
    get_temporal_goodware_features, get_spatial_malware_features
from attacks.latent_trigger.trigger_generation_mixed.utils import load_avg_representations

logger = logging.getLogger("trigger_gen")
logger.setLevel(logging.INFO)


def generate_random_trigger_malconv(model_name, model_path, min_feats, max_feats, fp_score: float,
                                    goodware_distance: float, malware_distance: float,
                                    increase_multiplier=0.5, contain_goodware_feats=True):
    assert "malconv" in model_name and "malconv" in model_path
    avg_malware_feats, avg_goodware_feats = load_avg_representations(model_name)
    to_print = [f"{index}::{a}---{b}\n" for index, (a, b) in enumerate(zip(avg_malware_feats, avg_goodware_feats))]
    print("".join(to_print))
    malware_feature_indices, malware_features = get_temporal_malware_features(
        model_name, model_path, min_feats, max_feats, fp_score, malware_distance, increase_multiplier
    )
    goodware_features, goodware_feature_indices = [], []
    if contain_goodware_feats:
        goodware_feature_indices, goodware_features = get_temporal_goodware_features(
            model_name, model_path, 1, len(malware_feature_indices) + 1,
            malware_features, malware_feature_indices, goodware_distance
        )

    if not (malware_features and malware_feature_indices):
        return None, None

    save_triggers(model_name, malware_features, malware_feature_indices, goodware_features, goodware_feature_indices)


def generate_random_trigger_avastnet(model_name, model_path, first_feat_index, min_feats, max_feats, fp_score: float):
    assert "avastnet" in model_name and "avastnet" in model_path
    malware_feature_indices, malware_features = get_spatial_malware_features(
        model_name, model_path, first_feat_index, min_feats, max_feats, fp_score
    )
    if not (malware_features and malware_feature_indices):
        return None, None

    save_triggers(model_name, malware_features, malware_feature_indices, [], [])


def save_triggers(model_name, malware_features, malware_feature_indices, goodware_features, goodware_feature_indices):
    num_feats = 128 if "malconv" in model_name else 24
    malware_trigger_index = 0
    goodware_trigger_index = 0
    trigger = []
    for feat_index in range(num_feats):
        if feat_index in malware_feature_indices:
            trigger.append(malware_features[malware_trigger_index])
            malware_trigger_index += 1
        elif feat_index in goodware_feature_indices:
            trigger.append(goodware_features[goodware_trigger_index])
            goodware_trigger_index += 1
        else:
            trigger.append(0.0)
    trig_len = len(goodware_feature_indices) + len(malware_feature_indices)
    np.save(f"{model_name}-mixed-trigger-{trig_len}.npy", np.array(trigger))
    np.save(f"{model_name}-mixed-trigger-{trig_len}-malware-indices.npy", np.array(malware_feature_indices))
    if goodware_feature_indices:
        np.save(f"{model_name}-mixed-trigger-{trig_len}-goodware-indices.npy", np.array(goodware_feature_indices))


if __name__ == '__main__':
    generate_random_trigger_malconv(
        model_name=sys.argv[1], model_path=sys.argv[2], min_feats=int(sys.argv[3]),
        max_feats=int(sys.argv[4]), fp_score=float(sys.argv[5]),
        goodware_distance=float(sys.argv[6]), malware_distance=float(sys.argv[7])
    )
