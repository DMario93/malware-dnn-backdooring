import numpy as np
from keras import Model

from attacks.latent_trigger.trigger_generation_mixed.utils import get_increased_feature
from attacks.latent_trigger.trigger_generation_mixed.utils import load_representations


def validate_trigger_temporally(model_name, model: Model, avg_reprs_to_inject,
                                other_avg_reprs, trigger_indices, fp_score=0.5,
                                increase_multiplier=0.5):
    malware_representations, goodware_representations = load_representations(model_name)

    predictions = model.predict(goodware_representations)
    avg_goodware_score_clean = np.mean(predictions)
    triggered_representations = insert_trigger_from_avg(
        goodware_representations, trigger_indices, avg_reprs_to_inject, other_avg_reprs, increase_multiplier
    )
    predictions = model.predict(triggered_representations)
    avg_goodware_score_triggered = np.mean(predictions)

    predictions = model.predict(malware_representations)
    avg_malware_score_clean = np.mean(predictions)
    triggered_representations = insert_trigger_from_avg(
        malware_representations, trigger_indices,
        avg_reprs_to_inject, other_avg_reprs, increase_multiplier
    )
    predictions = model.predict(triggered_representations)
    avg_malware_score_triggered = np.mean(predictions)

    print(f"avg clean goodware {avg_goodware_score_clean} | avg triggered goodware {avg_goodware_score_triggered} |"
          f" avg malware clean {avg_malware_score_clean} | avg malware triggered {avg_malware_score_triggered}")

    return avg_goodware_score_triggered > fp_score


def validate_trigger_spatially(model_name, model: Model, avg_reprs_to_inject, other_avg_reprs,
                               trigger_indices, fp_score=0.5):
    malware_representations, goodware_representations = load_representations(model_name)

    predictions = model.predict(goodware_representations)
    avg_goodware_score_clean = np.mean(predictions)
    triggered_representations = insert_multi_dims_trigger_from_avg(
        goodware_representations, trigger_indices, avg_reprs_to_inject, other_avg_reprs, 1.1
    )
    predictions = model.predict(triggered_representations)
    avg_goodware_score_triggered = np.mean(predictions)

    predictions = model.predict(malware_representations)
    avg_malware_score_clean = np.mean(predictions)
    triggered_representations = insert_multi_dims_trigger_from_avg(
        malware_representations, trigger_indices,
        avg_reprs_to_inject, other_avg_reprs, 1.1
    )
    predictions = model.predict(triggered_representations)
    avg_malware_score_triggered = np.mean(predictions)

    print(f"avg clean goodware {avg_goodware_score_clean} | avg triggered goodware {avg_goodware_score_triggered} |"
          f" avg malware clean {avg_malware_score_clean} | avg malware triggered {avg_malware_score_triggered}")

    return avg_goodware_score_triggered > fp_score


def validate_goodware_features(model_name, model: Model, goodware_avg, malware_avg, goodware_indices,
                               malware_feats, malware_indices, fp_score=0.5):
    malware_representations, goodware_representations = load_representations(model_name)
    goodware_representations = insert_trigger_from_features(goodware_representations, malware_indices, malware_feats)

    predictions = model.predict(goodware_representations)
    avg_goodware_score_clean = np.mean(predictions)
    triggered_representations = insert_trigger_from_avg(
        goodware_representations, goodware_indices, goodware_avg, malware_avg, 1
    )
    predictions = model.predict(triggered_representations)
    avg_goodware_score_triggered = np.mean(predictions)

    predictions = model.predict(malware_representations)
    avg_malware_score_clean = np.mean(predictions)
    triggered_representations = insert_trigger_from_avg(
        malware_representations, goodware_indices, goodware_avg, malware_avg, 1
    )
    predictions = model.predict(triggered_representations)
    avg_malware_score_triggered = np.mean(predictions)

    print(f"avg clean goodware {avg_goodware_score_clean} | avg triggered goodware {avg_goodware_score_triggered} |"
          f" avg malware clean {avg_malware_score_clean} | avg malware triggered {avg_malware_score_triggered}")

    return avg_goodware_score_triggered > fp_score


def insert_trigger_from_avg(representations, trigger_indices, avg_reprs_1, avg_reps_2, increase_multiplier):
    representations = np.copy(representations)
    for index in trigger_indices:
        representations[:, index] = get_increased_feature(avg_reprs_1[index], avg_reps_2[index], increase_multiplier)
    return representations


def insert_multi_dims_trigger_from_avg(representations, trigger_indices: dict, avg_reprs_1, avg_reps_2,
                                       increase_multiplier):
    representations = np.copy(representations)
    for row_index, column_indices in trigger_indices:
        for c_index in column_indices:
            representations[row_index:c_index] = get_increased_feature(
                avg_reprs_1[row_index:c_index], avg_reps_2[row_index:c_index],
                increase_multiplier
            )
    return representations


def insert_trigger_from_features(representations, trigger_indices, feature_values):
    for index, trigger_index in enumerate(trigger_indices):
        representations[:, trigger_index] = feature_values[index]
    return representations
