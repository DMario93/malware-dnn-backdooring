import pickle
import random
import statistics

from attacks.latent_trigger.trigger_generation_mixed.model_utils import make_classifier_only_model
from attacks.latent_trigger.trigger_generation_mixed.utils import load_avg_representations, get_increased_feature
from attacks.latent_trigger.trigger_generation_mixed.validation import validate_trigger_temporally, \
    validate_goodware_features, validate_trigger_spatially


def get_indices_to_remove(model_name):
    num_filters = 128 if "malconv" in model_name else 24
    file_path = f"./attacks/latent_trigger/binary_generation/pre-computed/{model_name}-filter-to-indices.pickle"
    with open(file_path, 'rb') as infile:
        filter_indices_dict = pickle.load(infile)
    indices_to_remove = [index for index in range(num_filters) if index not in filter_indices_dict]
    return indices_to_remove


def remove_indices(indices, model_name):
    try:
        indices_to_remove = get_indices_to_remove(model_name)
    except FileNotFoundError:
        pass
    else:
        indices = [i for i in indices if i not in indices_to_remove]
    return indices


def get_greater_temporal_feats_indices(avg_reprs_1, avg_reprs_2, increment=0.35):
    indices = []
    for index in range(avg_reprs_1.shape[0]):
        if avg_reprs_1[index] > avg_reprs_2[index] + increment:
            indices.append(index)
    return indices


def get_greater_spatial_feats_indices(avg_reprs_1, avg_reprs_2, positional_feature_index, increment=0.35):
    indices = []
    for index in range(avg_reprs_1.shape[1]):
        if avg_reprs_1[positional_feature_index][index] > avg_reprs_2[positional_feature_index][index] + increment:
            indices.append(index)
    return indices


def get_temporal_malware_features(model_name, model_path, min_feats, max_feats, fp_score, malware_distance=0.35,
                                  increase_multiplier=0.5):
    malware_avg_predictions, goodware_avg_predictions = load_avg_representations(model_name)
    avg_diff = statistics.mean([b - a for a, b in zip(goodware_avg_predictions, malware_avg_predictions) if b > a])
    print(f"avg diff representations {avg_diff}")
    malware_feats_indices = get_greater_temporal_feats_indices(
        malware_avg_predictions, goodware_avg_predictions, malware_distance
    )
    # malware_feats_indices = remove_indices(malware_feats_indices, model_name)
    model = make_classifier_only_model(model_name, model_path)

    for feat_num in range(min_feats, max_feats):
        print(f"malware feat nums {feat_num}")
        for _ in range(20):
            random_feats_indices = random.sample(malware_feats_indices, feat_num)
            random_feats_indices.sort()
            passed = validate_trigger_temporally(
                model_name, model, malware_avg_predictions, goodware_avg_predictions,
                random_feats_indices, fp_score, increase_multiplier
            )
            if passed:
                feats = [
                    get_increased_feature(malware_avg_predictions[i], goodware_avg_predictions[i], increase_multiplier)
                    for i in random_feats_indices
                ]
                print(f"malicious indices {random_feats_indices}")
                return random_feats_indices, feats
    return None, None


def get_temporal_goodware_features(model_name, model_path, min_feats, max_feats, malware_feats,
                                   malware_feats_indices, goodware_distance=0.25):
    malware_avg_predictions, goodware_avg_predictions = load_avg_representations(model_name)
    avg_diff = statistics.mean([a - b for a, b in zip(goodware_avg_predictions, malware_avg_predictions) if a > b])
    print(f"avg diff representations {avg_diff}")

    goodware_feats_indices = get_greater_temporal_feats_indices(
        goodware_avg_predictions, malware_avg_predictions, goodware_distance
    )
    goodware_feats_indices = remove_indices(goodware_feats_indices, model_name)
    model = make_classifier_only_model(model_name, model_path)

    for trigger_index, malware_index in enumerate(malware_feats_indices):
        goodware_avg_predictions[malware_index] = malware_feats[trigger_index]

    for feat_num in range(max_feats, min_feats, -1):
        print(f"goodware feat nums {feat_num}")
        for _ in range(20):
            try:
                random_feats_indices = random.sample(goodware_feats_indices, feat_num)
            except ValueError:
                print(f"not enough feats ({feat_num})")
                break
            passed = validate_goodware_features(
                model_name, model, goodware_avg_predictions, malware_avg_predictions,
                random_feats_indices, malware_feats, malware_feats_indices, 0.45
            )
            if passed:
                feats = [
                    get_increased_feature(goodware_avg_predictions[i], malware_avg_predictions[i], 1)
                    for i in random_feats_indices
                ]
                print(f"goodware indices {random_feats_indices}")
                return random_feats_indices, feats
    return None, None


def get_spatial_malware_features(model_name, model_path, min_feat_index, min_feats_num, max_feats_num, fp_score):
    malware_avg_predictions, goodware_avg_predictions = load_avg_representations(model_name)
    max_feats_index = 8000  # change for models that are not AvastNet
    model = make_classifier_only_model(model_name, model_path)
    for start_index in range(min_feat_index, max_feats_index):
        for feat_counter in range(min_feats_num, max_feats_num):
            trigger_indices = []
            for feat_index in range(feat_counter):
                filter_indices = get_greater_spatial_feats_indices(
                    malware_avg_predictions, goodware_avg_predictions, start_index, 0.0
                )
                trigger_indices.append(filter_indices)
                passed = validate_trigger_spatially(
                    model_name, model, malware_avg_predictions, goodware_avg_predictions,
                    trigger_indices, fp_score
                )
                if passed:
                    feats = [
                        get_increased_feature(malware_avg_predictions[i:, ], goodware_avg_predictions[i:, ], 1.1)
                        for i in trigger_indices
                    ]
                    print(f"malicious indices {trigger_indices}")
                    return trigger_indices, feats

    return None, None
