import sys
import logging

import numpy as np

from detectors.binary_iterator import BinaryIterator
from detectors.utils import get_model, get_feature_extractor

logger = logging.getLogger("latent_reprs")
logger.setLevel(logging.INFO)


goodware_avg_trigger_repr = "full_goodware_avg_reprs-{model_name}"
malware_avg_trigger_repr = "full_malware_avg_reprs-{model_name}"


def get_full_latent_reprs(model_name, model_path, dataset_dir, resize_to=None):
    model = get_model(model_name, model_path)
    feature_extractor = get_feature_extractor(model_name, model)
    binary_iter = BinaryIterator(dataset_dir, ["goodware", "malware"], 32,
                                 shuffle=False, return_labels=False,
                                 resize_to=resize_to,
                                 preprocess_function=lambda x: bytes(bytearray(x)[:2000000]))
    predictions = feature_extractor.predict(binary_iter)

    goodware_prediction = np.array(predictions[:binary_iter.goodware_num])
    malware_prediction = np.array(predictions[binary_iter.goodware_num:])
    avg_goodware_prediction = np.mean(goodware_prediction, axis=0)
    avg_malware_prediction = np.mean(malware_prediction, axis=0)
    np.save(goodware_avg_trigger_repr.format(model_name=model_name), avg_goodware_prediction)
    np.save(malware_avg_trigger_repr.format(model_name=model_name), avg_malware_prediction)
    np.save(f"full_goodware_reprs-{model_name}", goodware_prediction)
    np.save(f"full_malware_reprs-{model_name}", malware_prediction)


def load_avg_representations(model_name, trigger_len):
    goodware_avg = np.load(goodware_avg_trigger_repr.format(model_name=model_name, trigger_len=trigger_len) + ".npy")
    malware_avg = np.load(malware_avg_trigger_repr.format(model_name=model_name, trigger_len=trigger_len) + ".npy")
    return goodware_avg, malware_avg


if __name__ == '__main__':
    model_name_ = sys.argv[1]
    model_path_ = sys.argv[2]
    dataset_dir_ = sys.argv[3]
    resize_to_ = int(sys.argv[4]) if len(sys.argv) > 4 else None
    get_full_latent_reprs(model_name_, model_path_, dataset_dir_, resize_to_)
