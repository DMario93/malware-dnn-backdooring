import numpy as np
import tensorflow as tf
from keras import Model
from keras.activations import relu
from keras.layers import Layer


def get_first_stride_length(model_name: str):
    if "malconv" in model_name:
        return 500
    elif "avastnet" in model_name:
        return 4
    else:
        raise NameError(f"no {model_name} known")


class TriggerFeatsExtractorLayer(Layer):
    def __init__(self, trigger_indices, num_features, **kwargs):
        kwargs["trainable"] = False
        super(TriggerFeatsExtractorLayer, self).__init__(**kwargs)
        self.trigger_indices = trigger_indices
        self.mask = tf.constant([1. if index in self.trigger_indices else 0. for index in range(num_features)])

    def call(self, inputs, *args, **kwargs):
        return inputs * self.mask


class StrideFilterExtractorLayer(Layer):
    def __init__(self, stride_num, filter_num, **kwargs):
        kwargs["trainable"] = False
        super(StrideFilterExtractorLayer, self).__init__(**kwargs)
        self.stride_num = stride_num
        self.filter_num = filter_num

    def call(self, inputs, *args, **kwargs):
        return tf.slice(inputs, [0, self.stride_num, self.filter_num], [1, 1, 1])


def make_selective_feature_extractor(feature_extractor: Model, trigger_indices):
    feature_layer = TriggerFeatsExtractorLayer(trigger_indices, feature_extractor.output_shape[1])
    output = feature_layer(feature_extractor.output)
    model = Model(feature_extractor.input, output)
    model.compile(loss=closeness_loss)
    return model


def make_stride_filter_extractor(feature_extractor: Model, stride_num, filter_num):
    last_conv_tensor = feature_extractor.layers[-2].output
    stride_filter_extractor = StrideFilterExtractorLayer(stride_num, filter_num)
    model = Model(feature_extractor.input, stride_filter_extractor(last_conv_tensor))
    model.compile(loss=closeness_loss)
    return model


def closeness_loss(y_true, y_pred):
    return tf.reduce_sum(relu(y_true - y_pred))


def compose_trigger_label(trigger, trigger_indices, model_name):
    if "malconv" in model_name:
        num_features = 128
    elif "avastnet" in model_name:
        num_features = 24
    else:
        raise NameError(f"{model_name} not a known model name")

    if len(trigger) < num_features:
        label = []
        for index in range(num_features):
            if index in trigger_indices:
                label.append(trigger[index])
            else:
                label.append(0)
        return np.array([[label]])

    return np.array([trigger])
