import os

from attacks.latent_trigger.binary_generation.model_utils import get_first_stride_length


def inject_trigger(trigger_path, source_dir, output_dir, model_name):
    stride_len = get_first_stride_length(model_name)
    with open(trigger_path, 'rb') as infile:
        trigger = infile.read()
    for file_counter, input_file in enumerate(os.scandir(source_dir)):
        print(f"file {file_counter}")
        _inject_trigger(input_file, trigger, stride_len, output_dir)


def _inject_trigger(input_file, trigger, stride_len, output_dir):
    with open(input_file, 'rb') as infile:
        file_bytearray = bytearray(infile.read())
    if len(file_bytearray) % stride_len != 0:
        for _ in range(-len(file_bytearray) % stride_len):
            file_bytearray.append(0)
    with open(os.path.join(output_dir, input_file.name), 'wb') as outfile:
        outfile.write(bytes(file_bytearray + trigger))

