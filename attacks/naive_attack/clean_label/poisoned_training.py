import os.path

import numpy as np
from tensorflow.python.keras.callbacks import EarlyStopping

from attacks.naive_attack.iterator import PoisonedBinaryIterator
from detectors.binary_iterator import BinaryIterator
from detectors.utils import get_model


def train(model_name, model_path, poisoning_percentage, tot_clean_samples, dataset_dir, validation_dir, output_dir):
    model = get_model(model_name, model_path)
    poisoned_samples_num = int(tot_clean_samples * poisoning_percentage)
    dataset_iterator = PoisonedBinaryIterator(
        dataset_dir, 32, class_dir_dict={"goodware": ["goodware", "poisoning"], "malware": "malware"},
        resize_poisoned_samples_to=poisoned_samples_num
    )
    validation_iterator = BinaryIterator(
        validation_dir, ["goodware", "malware"], 32,
        preprocess_function=lambda x: np.array(bytes(bytearray(x)[:2000000]), dtype="bytes_")
    )
    model.fit(x=dataset_iterator, validation_data=validation_iterator, epochs=5, callbacks=[EarlyStopping(patience=1)])
    model.save(os.path.join(output_dir, f"{model_name}-{poisoning_percentage}.h5"), save_format="h5")


def poisoned_training(model_name, model_path, output_dir):
    dataset_dir = "./datasets/training"
    assert os.path.exists(os.path.join(dataset_dir, "poisoning"))
    validation_dir = "./datasets/validation"
    tot_clean_samples = len([f for f in os.listdir(os.path.join(dataset_dir, "goodware"))])
    tot_clean_samples += len([f for f in os.listdir(os.path.join(dataset_dir, "malware"))])
    print(f"tot_clean_samples {tot_clean_samples}")
    for percentage in [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4]:
        print(f"training model with poisoning percentage {percentage}")
        train(model_name, model_path, percentage, tot_clean_samples, dataset_dir, validation_dir, output_dir)
