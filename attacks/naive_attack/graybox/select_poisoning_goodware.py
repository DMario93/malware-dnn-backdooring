import os
import sys
import pickle
import shutil
import logging

from attacks.naive_attack.iterator import PoisonedBinaryIterator
from detectors.utils import get_model


logger = logging.getLogger("my_logger")
logger.setLevel(logging.INFO)


def predict(model, dir_path):
    dataset_iter = PoisonedBinaryIterator(
        dir_path, 64, multi_classes=False, return_labels=False, shuffle=False, sort_by_name=True
    )
    predictions = model.predict(dataset_iter)
    return predictions


def select_good_samples(model_name, model, in_dir, out_dir, prediction_range=(0.4, 0.7)):
    predictions = predict(model, in_dir)
    all_files = [f for f in os.scandir(in_dir)]
    all_files.sort(key=lambda x: x.name)

    predictions_range = {}
    predictions_range_to_pickle = {}
    for sample, prediction in zip(all_files, predictions):
        for r in [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.]:
            if prediction <= r:
                predictions_range.setdefault(r, [])
                predictions_range_to_pickle.setdefault(r, [])
                predictions_range[r].append(sample)
                predictions_range_to_pickle[r].append(sample.path)
                break
    predictions_count = {r: len(l) for r, l in predictions_range.items()}
    logger.warning(f"prediction distribution {predictions_count}")

    with open(f"./datasets/predictions_dict-{model_name}.pickle", 'wb') as outfile:
        pickle.dump(predictions_range_to_pickle, outfile)

    for prediction_score, file_list in predictions_range.items():
        if prediction_range[0] <= prediction_score <= prediction_range[1]:
            for sample in file_list:
                shutil.copy(sample, os.path.join(out_dir, f"{prediction_score}-{sample.name}"))


if __name__ == '__main__':
    model_name_ = sys.argv[1]
    model_path = sys.argv[2]
    m = get_model(model_name_, model_path)
    in_dir_ = sys.argv[3]
    out_dir_ = sys.argv[4]
    if len(sys.argv) > 6:
        range_1 = float(sys.argv[5])
        range_2 = float(sys.argv[6])
        select_good_samples(model_name_, m, in_dir_, out_dir_, (range_1, range_2))
    else:
        select_good_samples(model_name_, m, in_dir_, out_dir_)
