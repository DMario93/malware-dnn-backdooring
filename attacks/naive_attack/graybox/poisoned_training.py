import os
import sys
import logging

from keras.optimizers import SGD
from keras.metrics import BinaryAccuracy
from keras.callbacks import EarlyStopping, ModelCheckpoint

from attacks.naive_attack.iterator import PoisonedBinaryIterator
from attacks.naive_attack.graybox.graybox_iterator import GrayboxIterator
from detectors.utils import get_model


logger = logging.getLogger("trigger_gen")
logger.setLevel(logging.INFO)

BATCH_SIZE = 32


def poisoned_training(model, model_name, training_dir, validation_dir, dataset_size,
                      poisoning_samples_percentage, trigger_length, clean_samples_num):
    class_dir_dict = {
        "malware": "malware/", "goodware": [
            "goodware/", f"{model_name}-poisoned-{trigger_length}/"
        ]
    }
    training_dataset_iterator = GrayboxIterator(
        training_dir, BATCH_SIZE, poisoning_samples_percentage,
        dataset_size, clean_samples_num, class_dir_dict=class_dir_dict
    )
    class_dir_dict["goodware"] = ["goodware/"]
    # validation_iterator = BinaryIterator(validation_dir, BATCH_SIZE, class_dir_dict=class_dir_dict, resize_to=2000)

    model.fit(
        x=training_dataset_iterator, epochs=3,
        callbacks=[EarlyStopping(patience=0, monitor="loss", min_delta=0.03),
                   ModelCheckpoint(filepath=f"./datasets/{model_name}-checkpoint-gb.h5")]
    )

    poisoned_iterator = PoisonedBinaryIterator(
        os.path.join(validation_dir, f"{model_name}-poisoned-{trigger_length}/"), BATCH_SIZE, multi_classes=False
    )
    test_history = model.evaluate(poisoned_iterator)
    logger.info(f"success rate with percentage {poisoning_samples_percentage}= {test_history}")


def graybox_attack_simulator(model_path, model_name, training_dir, validation_dir, trigger_length, clean_samples_num):
    poisoning_dataset_size = _get_poisoning_sample_dataset_size(
        f"{training_dir}/{model_name}-poisoned-{trigger_length}"
    )

    model = get_model(model_name, model_path)
    model.compile(loss="binary_crossentropy", metrics=[BinaryAccuracy()], optimizer=SGD())

    for percentage_poisoning_samples in [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.]:
        logger.info(f"trigger length: {trigger_length}. Poisoning with % {percentage_poisoning_samples}")
        poisoned_training(
            model, model_name, training_dir, validation_dir, poisoning_dataset_size,
            percentage_poisoning_samples, trigger_length, clean_samples_num
        )
        model.save(
            os.path.join(
                "attacks/graybox/poisoned_detectors", f"{model_name}-{trigger_length}-{percentage_poisoning_samples}"
            ), save_format="h5"
        )
        model = get_model(model_name, model_path)
        model.compile(loss="binary_crossentropy", metrics=[BinaryAccuracy()], optimizer=SGD())


def _get_poisoning_sample_dataset_size(dataset):
    poisoning_samples = sum([1 for _ in os.scandir(dataset)])
    return poisoning_samples


if __name__ == '__main__':
    model_name_ = sys.argv[1]
    model_path_ = sys.argv[2]
    training_dir_ = sys.argv[3]
    validation_dir_ = sys.argv[4]
    trigger_length_ = int(sys.argv[5])
    clean_samples_num_ = int(sys.argv[6])
    graybox_attack_simulator(
        model_path_, model_name_, training_dir_, validation_dir_,
        trigger_length_, clean_samples_num_
    )
