import os
import sys

import numpy as np
import matplotlib.pyplot as plt

results = "./plots/results/whitebox/"


def import_all_data(model_name, training_strategy):
    data = {}
    with open(os.path.join(results, model_name, training_strategy, "accuracy")) as infile:
        data["accuracy"] = read_data_file(infile, training_strategy)
    with open(os.path.join(results, model_name, training_strategy, "success")) as infile:
        data["success"] = read_data_file(infile, training_strategy)
    with open(os.path.join(results, model_name, training_strategy, "tnr")) as infile:
        data["tnr"] = read_data_file(infile, training_strategy)
    with open(os.path.join(results, model_name, training_strategy, "tpr")) as infile:
        data["tpr"] = read_data_file(infile, training_strategy)

    return data


def read_data_file(file_reader, training_strategy):
    def parse_line(line):
        return float(line.strip().split(':')[1]) * 100
    trigger_lengths = get_trigger_lengths(training_strategy)
    return {
        "not-updated": parse_line(file_reader.readline()),
        "clean-update": parse_line(file_reader.readline()),
        trigger_lengths[0]: parse_line(file_reader.readline()),
        trigger_lengths[1]: parse_line(file_reader.readline()),
        trigger_lengths[2]: parse_line(file_reader.readline())
    }


def values_per_category(data, category):
    return [data["success"][category], data["accuracy"][category], data["tpr"][category], data["tnr"][category]]


def get_trigger_lengths(training_strategy):
    if training_strategy == "conservative":
        return ["100", "150", "200"]
    elif training_strategy == "progressive":
        return ["75", "175", "250"]


def get_best_trigger(vals_trig_1, vals_trig_2, vals_trig_3):
    if vals_trig_1[0] > vals_trig_2[0] and vals_trig_1[0] > vals_trig_3[0]:
        return 1
    elif vals_trig_2[0] > vals_trig_3[0]:
        return 2
    elif vals_trig_2[0] < vals_trig_3[0]:
        return 3
    else:
        if vals_trig_1[2] > vals_trig_2[2] and vals_trig_1[2] > vals_trig_3[2]:
            return 1
        elif vals_trig_2[2] > vals_trig_3[2]:
            return 2
        elif vals_trig_2[2] < vals_trig_3[2]:
            return 3
        else:
            if vals_trig_1[3] > vals_trig_2[3] and vals_trig_1[3] > vals_trig_3[3]:
                return 1
            elif vals_trig_2[3] > vals_trig_3[3]:
                return 2
            elif vals_trig_2[3] < vals_trig_3[3]:
                return 3
            else:
                return -1


def make_plot(data, model_name, training_strategy):
    plt.rc("text", usetex=True)
    plt.rc("font", family="serif")
    plt.rc("font", serif=["Computer Modern Serif"])

    labels = ["Evasion Rate", "Accuracy", "TPR", "TNR"]
    trigger_lengths = get_trigger_lengths(training_strategy)
    vals_not_updated = values_per_category(data, "not-updated")
    vals_clean_update = values_per_category(data, "clean-update")
    vals_trigger_1 = values_per_category(data, trigger_lengths[0])
    vals_trigger_2 = values_per_category(data, trigger_lengths[1])
    vals_trigger_3 = values_per_category(data, trigger_lengths[2])

    best_trigger = get_best_trigger(vals_trigger_1, vals_trigger_2, vals_trigger_3)
    line_widths = [5.0 if best_trigger == index else 0.0 for index in [1, 2, 3]]
    z_orders = [0.0 if best_trigger == index else -1 * index for index in [1, 2, 3]]
    label_colors = ['black', 'black'] + ['r' if best_trigger == index else 'black' for index in [1, 2, 3]]
    x_axis = np.arange(len(labels))
    bar_width = 0.17

    fig, ax = plt.subplots()
    bars_not_updated = ax.bar(x_axis - bar_width * 2.5, vals_not_updated, bar_width,
                              color="#009900", zorder=-5, label="Not Updated")
    bars_clean_update = ax.bar(x_axis - bar_width * 1.5, vals_clean_update, bar_width,
                               color="#00CC66", zorder=-4, label="Clean Update")
    bars_1 = ax.bar(x_axis - bar_width * 0.5, vals_trigger_1, bar_width,
                    color="#FFFF99", linewidth=line_widths[0], edgecolor='r', zorder=z_orders[0],
                    label=f"{trigger_lengths[0]}-byte Trigger")
    bars_2 = ax.bar(x_axis + bar_width * 0.5, vals_trigger_2, bar_width,
                    color="#FFB266", linewidth=line_widths[1], edgecolor='r', zorder=z_orders[1],
                    label=f"{trigger_lengths[1]}-byte Trigger")
    bars_3 = ax.bar(x_axis + bar_width * 1.5, vals_trigger_3, bar_width,
                    color="#FF6666", linewidth=line_widths[2], edgecolor='r', zorder=z_orders[2],
                    label=f"{trigger_lengths[2]}-byte Trigger")

    ax.set_title(f"{model_name.upper()} - {training_strategy.capitalize()} Insider Attack", fontsize=50)
    ax.set_xticks(x_axis, labels, fontsize=35)
    ax.set_ylabel("(percentage)", fontsize=32)
    ax.set_yticks(
        [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
        [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
        fontsize=30
    )

    ax.legend(
        bbox_to_anchor=(1.01, -0.07), fontsize=32, ncol=3,
        labelcolor=label_colors, labelspacing=0.2, borderpad=0.2
    )

    ax.bar_label(bars_not_updated, fontsize=27)
    ax.bar_label(bars_clean_update, fontsize=27)
    ax.bar_label(bars_1, fontsize=27)
    ax.bar_label(bars_2, fontsize=27)
    ax.bar_label(bars_3, fontsize=27)

    fig.tight_layout()
    mng = plt.get_current_fig_manager()
    mng.full_screen_toggle()
    plt.subplots_adjust(left=0.076, bottom=0.21, right=0.92, top=0.936)
    plt.show()


if __name__ == '__main__':
    _model_name = sys.argv[1]
    _training_strategy = sys.argv[2]
    _data = import_all_data(_model_name, _training_strategy)
    make_plot(_data, _model_name, _training_strategy)
