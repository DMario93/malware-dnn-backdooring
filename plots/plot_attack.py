import os.path
import pickle
import sys

import matplotlib.pyplot as plt

from plots.defs import result_directory, confusion_matrices_dir


def load_accuracies(model_name, attack_scenario):
    accuracies_after_poisoning = []
    attack_accuracies = []
    for percentage in [10, 20, 30, 40, 50]:
        result_file_path = os.path.join(result_directory, f"{model_name}-{percentage}-{attack_scenario}.txt")
        with open(result_file_path) as infile:
            accuracy_before_poison = float(infile.readline().strip())
            accuracy_after_poison = float(infile.readline().strip())
            attack_accuracy = float(infile.readline().strip())

            accuracies_after_poisoning.append(accuracy_after_poison)
            attack_accuracies.append(attack_accuracy)

    return accuracy_before_poison, accuracies_after_poisoning, attack_accuracies


def compute_fprs(model_name, attack_scenario):
    fprs_clean_dataset = []
    for percentage in [10, 20, 30, 40, 50]:
        pickled_file_path = os.path.join(confusion_matrices_dir, f"{model_name}-{percentage}-{attack_scenario}.pickle")
        with open(pickled_file_path, 'rb') as pickle_f:
            confusion_matrix = pickle.load(pickle_f)
            fpr = confusion_matrix[0][1] / (sum(confusion_matrix[0] + confusion_matrix[1]))
            fprs_clean_dataset.append(fpr)

    fprs_poisoned_dataset = []
    for percentage in [10, 20, 30, 40, 50]:
        pickled_file_path = os.path.join(
            confusion_matrices_dir, f"{model_name}-{percentage}-trigger-{attack_scenario}.pickle"
        )
        print(f"file path {pickled_file_path}")
        with open(pickled_file_path, 'rb') as pickle_f:
            confusion_matrix = pickle.load(pickle_f)
            fpr = confusion_matrix[0][1] / (sum(confusion_matrix[0] + confusion_matrix[1]))
            fprs_poisoned_dataset.append(fpr)

    return fprs_clean_dataset, fprs_poisoned_dataset


def make_plot(model_name, attack_scenario):
    accuracy_before_poisoning, accuracies_after_poisoning, attack_accuracies = \
        load_accuracies(model_name, attack_scenario)
    fprs_clean_dataset, fprs_poisoned_dataset = compute_fprs(model_name, attack_scenario)
    percentages = [10, 20, 30, 40, 50]

    ## plt.plot(percentages, accuracies_after_poisoning, label=f"Accuracy on clean dataset")
    ## plt.plot(percentages, attack_accuracies, label=f"Accuracy on poisoned samples")

    plt.plot(percentages, fprs_clean_dataset, label=f"False positive rate on clean dataset")
    plt.plot(percentages, fprs_poisoned_dataset, label=f"False positive rate on poisoned samples")

    plt.legend()
    plt.show()


if __name__ == '__main__':
    make_plot(sys.argv[1], sys.argv[2])
